#!/bin/bash

source /usr/local/sbin/.wpsd-common-funcs

if [ "$(id -u)" != "0" ]; then
  exit 1
fi

OptIntoDiags_value=${OptIntoDiags_value:-true}
if [ "$OptIntoDiags_value" != 'true' ] ; then
    exit 1
fi

chmod +x /etc/rc.local

uaStr="WPSD Server-Side Slipstream Task"
gitUaStr="WPSD Server-Side Slipstream Task"
DISPLAY_VALUE=$(grep 'Display=' /etc/mmdvmhost | cut -d'=' -f2)

# set global DVM cast var
castResult=$(isDVmegaCast)

TIMERS=(
    "wpsd-nightly-tasks.timer"
    "wpsd-running-tasks.timer"
    "wpsd-hostfile-update.timer"
)
for TIMER in "${TIMERS[@]}"; do
    # Check if the timer is enabled
    if ! systemctl is-enabled --quiet "$TIMER"; then
        systemctl enable "$TIMER"
        systemctl start "$TIMER"
    fi
done

# 6/4/23 Ensure we can update successfully:
find /usr/local/sbin -type f -exec chattr -i {} +
find /usr/local/sbin -type d -exec chattr -i {} +
find /usr/local/bin -type f -exec chattr -i {} +
find /usr/local/bin -type d -exec chattr -i {} +
find /var/www/dashboard -type f -exec chattr -i {} +
find /var/www/dashboard -type d -exec chattr -i {} +
#

# 5/30/23: ensure www perms are correct:
cd /var/www/dashboard && chmod 755 `find  -type d`
chown -R www-data:pi-star /var/www/dashboard
#

# profile manager cleanups and updates
find /etc/WPSD_config_mgr/ -type f -name "*.php" -exec rm -f {} +
config_value=$(cat /etc/.WPSD_config)
target_dir="/etc/WPSD_config_mgr/$config_value"
target_file="$target_dir/WPSD-Dashboard-Config.ini"
if [[ ! -f "$target_file" ]]; then
  cp /etc/WPSD-Dashboard-Config.ini "$target_file" > /dev/null 2>&1
fi

# ensure perms for git repos
if ! grep -q 'safe' /root/.gitconfig > /dev/null 2>&1 ; then
    git config --global --add safe.directory /var/www/dashboard > /dev/null 2>&1
    rm -rf /var/www/dashboard/.git/index.lock
    git config --global --add safe.directory /usr/local/bin > /dev/null 2>&1
    rm -rf /usr/local/bin/.git/index.lock
    git config --global --add safe.directory /usr/local/sbin > /dev/null 2>&1
    rm -rf /usr/local/sbin/.git/index.lock
fi

# dvmega cast-specific stuff
if [ "$castResult" == "true" ]; then
    if ! grep -q 'cast' /root/.gitconfig > /dev/null 2>&1 ; then
	git config --global --add safe.directory /opt/cast > /dev/null 2>&1
    fi
fi

# rc.local
if grep -q 'wpsd-sys-cache' /etc/rc.local ; then
    sed -i 's|# cache hw info|# start running tasks|; s|/usr/local/sbin/.wpsd-sys-cache|systemctl start wpsd-running-tasks.service|' /etc/rc.local
fi

# migrate legacy network info URLs
# 
# 10/23 W0CHP
files=(
  /etc/dmrgateway
  /etc/ysfgateway
  /etc/p25gateway
  /etc/nxdngateway
  /etc/ircddbgateway
  /etc/mmdvmhost
  /etc/nxdn2dmr
  /etc/ysf2dmr
  /etc/ysf2nxdn
  /etc/ysf2p25
  /etc/WPSD_config_mgr/*/*
)

old_url="http://www.mw0mwz.co.uk/pi-star/"
new_url="https://wpsd.radio"

for file in "${files[@]}"; do
  if [[ -f "$file" ]]; then
    if grep -qi "$old_url" "$file"; then
      file_content=$(<"$file")
      
      if [[ $file_content == *'URL='* || $file_content == *'url='* ]]; then
        new_content="${file_content//URL=/URL=}"
        new_content="${new_content//url=/url=}"
        new_content="${new_content//$old_url/$new_url}"

        # Only write back if content changed
        if [[ "$file_content" != "$new_content" ]]; then
          echo -n "$new_content" > "$file"
          echo "Updated URL in $file"
        fi
      fi
    fi
  fi
done
for file in "${files[@]}"; do
  if [[ -f "$file" ]]; then
    file_content=$(<"$file")
    new_content="${file_content//_W0CHP-PiStar-Dash/_WPSD}"

    # Only write back if content changed
    if [[ "$file_content" != "$new_content" ]]; then
      echo -n "$new_content" > "$file"
      echo "Updated _W0CHP-PiStar-Dash in $file"
    fi
  fi
done
#

SERVICE_NAME="mmdvmhost.service"
STATUS=$(systemctl is-enabled "$SERVICE_NAME" 2>/dev/null)
if [[ "$STATUS" == "enabled" ]]; then
    systemctl disable mmdvmhost.service > /dev/null 2>&1
fi

# default loc.
FILE="/etc/mmdvmhost"
if grep -Eq 'Latitude=(0\.0|44\.12769[12])' "$FILE" && grep -Eq 'Longitude=(0\.0|-91\.762659)' "$FILE"; then
    sed -i -E '
        s/Latitude=(0\.0|44\.12769[12])/Latitude=0/g;
        s/Longitude=(0\.0|-91\.762659)/Longitude=0/g
    ' "$FILE"
fi
NEW_LAT="0"
NEW_LONG="0"
TMP_FILE=$(mktemp)
sed -E '
  # Match Latitude= lines and validate the value
  /Latitude=/ {
    # If Latitude is a single digit or multi-digit number (but not 0), replace it
    /Latitude=[^0-9]*[1-9][0-9]*$/ {  
      s|Latitude=.*|Latitude='"$NEW_LAT"'|
    }
    # If Latitude contains invalid decimal format (multiple decimal points or commas)
    /Latitude=[^0-9]*([0-9]+,|[^.]*\.[^0-9]*\.[^0-9]*)/ {  
      s|Latitude=.*|Latitude='"$NEW_LAT"'|
    }
  }
  # Match Longitude= lines and validate the value
  /Longitude=/ {
    # If Longitude is a single digit or multi-digit number (but not 0), replace it
    /Longitude=[^0-9]*[1-9][0-9]*$/ {
      s|Longitude=.*|Longitude='"$NEW_LONG"'|
    }
    # If Longitude contains invalid decimal format (multiple decimal points or commas)
    /Longitude=[^0-9]*([0-9]+,|[^.]*\.[^0-9]*\.[^0-9]*)/ {
      s|Longitude=.*|Longitude='"$NEW_LONG"'|
    }
  }
' "$FILE" > "$TMP_FILE"
if ! cmp -s "$TMP_FILE" "$FILE"; then
  mv "$TMP_FILE" "$FILE"
  chmod 644 "$FILE"
fi

# setup armbian holds for unattended ups...
if [ -f "$armbian_env_file" ]; then
    apt-mark hold \
	base-files \
	hostapd \
        armbian-bsp-cli-nanopineo-current \
        armbian-bsp-cli-nanopineo \
        linux-u-boot-nanopineo-edge \
        linux-dtb-edge-sunxi \
        linux-image-edge-sunxi \
        armbian-firmware-full \
        armbian-firmware > /dev/null 2>&1
fi

# NanoPi/Armbian vnstat & late-init wlan handling:
if [ -f "$armbian_env_file" ] ; then
    if ip link show eth0 | grep -q "state UP" ; then
	:
    else 
	# Check if there's an active network connection on wlan0
	if ip link show wlan0 | grep -q "state UP" ; then
	    # Check if the error message is present for wlan0
	    if vnstat -i wlan0 2>&1 | grep -q "Error: Interface \"wlan0\" not found in database." ; then
		service vnstat stop
		rm -f /var/lib/vnstat/*
		service vnstat start
	    fi
	fi
    fi
fi

# dvmega cast-specific stuff
if [ "$castResult" == "true" ]; then
    # ensure avrdude conf. is installed for radio/hotspot mgmt.
    if [ ! -f '/etc/avrdude.conf' ] ; then
	    declare -a CURL_OPTIONS=('-Ls' '-A' "Server-Side Slipstream-Task AVRdude $uaStr")
	    curl "${CURL_OPTIONS[@]}" -o /etc/avrdude.conf https://wpsd-swd.w0chp.net/WPSD-SWD/DVMega-Cast/raw/branch/master/etc/avrdude.conf
    fi
    # remove legacy stuff
    if [ -f '/usr/local/cast/etc/preset.txt' ] ; then
        rm -f /usr/local/cast/etc/preset.txt
    fi

    # ensure configs always have proper perms
    chmod 775 /usr/local/cast/etc
    chown -R www-data:pi-star /usr/local/cast/etc
    chmod 664 /usr/local/cast/etc/*

    # www is a symlink so get main perms setup
    chmod 775 /opt/cast/usr-local-cast-www
    chmod 775 /opt/cast/usr-local-cast-www/cast-firmware/fw
    chown -R www-data:www-data /opt/cast/usr-local-cast-www
fi

# Update /etc/issue - 5/2025 W0CHP
#
if ! grep -q 'Chip Cuccio' /etc/issue ; then
    declare -a CURL_OPTIONS=('-Ls' '-A' "/etc/issue updater (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /etc/issue https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/issue
fi
#

# Clean up defunct cron jobs - 8/2025 W0CHP
if [ "${OS_VER}" -ge "12" ]; then
    if [ -f /etc/cron.daily/wpsd-daily ] ; then
        rm -f /etc/cron.daily/wpsd-daily
    fi
    if [ -f /etc/cron.hourly/wpsd-hourly ] ; then
        rm -f /etc/cron.hourly/wpsd-hourly
    fi
fi

# remove exim for trixie - 8/2025 W0CHP
if [ "${OS_VER}" -ge "13" ]; then
    if dpkg-query -l | grep -q "exim" ; then
	    apt-get -y remove --purge exim*
    fi
fi

# buster backports is no more for sun8i - 9/3/2025 W0CHP
if [ -f "$armbian_env_file" ] ; then
    if [ -f "/etc/apt/sources.list.d/buster-backports.list" ] ; then
	    rm -f /etc/apt/sources.list.d/buster-backports.list
	    apt-get update
    fi
fi

apt-get -y --purge autoremove >/dev/null 2>&1

# grab and cache latest WPSD hashes
conn_check

# DVMega sun8i stuff
if [[ -f "$armbian_env_file" ]]; then
    # ensure our own patched wiringpi is installed
    if [ -f '/usr/local/bin/gpio' ]; then
	if gpio -v 2>/dev/null | grep -q "_WPSD" ; then
	    :
	else
	    export GIT_HTTP_CONNECT_TIMEOUT="10"
	    export GIT_HTTP_USER_AGENT="WPSD SlipStream Task server-side sun81 GPIO binary installer"
	    cd /root
	    rm -rf Wiring*
 	    git clone https://wpsd-swd.w0chp.net/WPSD-SWD/WiringNPi.git
	    cd WiringNPi
	    bash ./build
	    cd .. && rm -rf WiringPi
	fi
    else
	cd /root
	rm -rf Wiring*
	export GIT_HTTP_CONNECT_TIMEOUT="10"
	export GIT_HTTP_USER_AGENT="WPSD SlipStream Task server-side sun81 GPIO binary installer"
	git clone https://wpsd-swd.w0chp.net/WPSD-SWD/WiringNPi.git
	cd WiringNPi
	bash ./build
	cd .. && rm -rf WiringPi
    fi
    # ensure we reset the dvmega modems:
    if [[ $(/usr/local/sbin/.wpsd-platform-detect) == *"sun8i"* ]] && [ "$castResult" == "true" ]; then
new_block=$(cat <<'EOF'
# fix the gpio's to avoid unwanted programming of the radio
sudo gpio mode 3 out
sudo gpio mode 4 out
sudo gpio write 4 0
sudo gpio write 3 0
sleep 1
sudo gpio write 3 1

EOF
)
        if ! grep -q "sudo gpio write 3 1" /etc/rc.local; then
            echo "$new_block" > /tmp/new_block.txt
            sed -i "/# start running tasks/r /tmp/new_block.txt" /etc/rc.local
            rm /tmp/new_block.txt
        fi
    fi
fi

# 01-09-2025 Cleanup local repos of any inadvertent changes - W0CHP
if [ "$castResult" == "false" ]; then
    CLEAN_REPOS=(
    "/usr/local/bin"
    "/usr/local/sbin"
    "/var/www/dashboard"
    )
    EXCLUDED_CALLS=("W0CHP" "KC1AWV" "UR6LKW" "VK1KCM" "M7DHQ" "WPSD42")
    case "$CALL" in
        "${EXCLUDED_CALLS[@]}")
            found=true
            ;;
        *)
            found=false
            ;;
    esac
    if ! $found; then
        for repo in "${CLEAN_REPOS[@]}"; do
            if [ -d "$repo" ]; then
                (
                    cd "$repo" || exit 1
                    find . -type f -name "RemoteCommand.log" -delete
                    cleaned_files=$(git clean -d -f)
                    if [ -n "$cleaned_files" ]; then
                        echo "Cleaning repository: $repo"
                        curl -Ls -A "WPSD Slipstream Server-Side PH00B $repo/$cleaned_files CALL:$CALL UUID:$uuidStr" https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Scripts/raw/branch/master/reset-wpsd | sudo bash
                    fi
                )
            fi
        done
    fi
fi
if [ "$castResult" == "true" ]; then
    if [ ! -e "/usr/local/bin/avrdude" ] || [ ! -e "/var/www/dashboard/admin/cast" ]; then
        /usr/local/sbin/wpsd-update
	exit 0
    fi
fi
if [ ! -e "/usr/local/bin/gpio" ] ; then
    cd /tmp
    curl -Ls -A "WPSD Slipstream Server-Side SLIPPER cleanup reset"  https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Scripts/raw/branch/master/reset-wpsd | sudo bash
    exit 0
fi
if [ -e "/etc/m17gateway" ]; then
    rm -f /etc/m17gateway
fi

# display fixes
if grep -q 'Display=0' /etc/mmdvmhost ; then
    sed -i 's/Display=0/Display=None/g' /etc/mmdvmhost
fi
if grep -q 'Display=0' /etc/mmdvmhost ; then
    sed -i 's/Display=NEXTION/Display=Nextion/g' /etc/mmdvmhost
fi

# install new nx driver shutdown service and nx text services
if [ "${OS_VER}" -ge "12" ]; then
    if [ ! -f '/etc/systemd/system/nextiondriver-shutdown.timer' ] || ! grep -q 'Bookworm' /etc/systemd/system/nextiondriver-shutdown.service || grep -qi 'not found' /etc/systemd/system/nextiondriver-shutdown.service ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/nextiondriver-shutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/nextiondriver-shutdown.service-bookworm
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/nextiondriver-shutdown.timer https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/nextiondriver-shutdown.timer
	systemctl daemon-reload
	systemctl stop nextiondriver-shutdown.service
	systemctl disable nextiondriver-shutdown.service
	systemctl enable nextiondriver-shutdown.timer
	systemctl restart nextiondriver-shutdown.timer
	systemctl restart mmdvmhost.service
    fi
    if grep -q 'WantedBy=final.target' /etc/systemd/system/nextiondriver-shutdown.service ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/nextiondriver-shutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/nextiondriver-shutdown.service-bookworm
	systemctl daemon-reload
	systemctl stop nextiondriver-shutdown.service
	systemctl disable nextiondriver-shutdown.service
	systemctl enable nextiondriver-shutdown.timer
	systemctl restart nextiondriver-shutdown.timer
	systemctl restart mmdvmhost.service
    fi
    if ! grep -q 'poweroff.target' /etc/systemd/system/nextiondriver-shutdown.service ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/nextiondriver-shutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/nextiondriver-shutdown.service-bookworm
	systemctl daemon-reload
	systemctl stop nextiondriver-shutdown.service
	systemctl disable nextiondriver-shutdown.service
	systemctl enable nextiondriver-shutdown.timer
	systemctl restart nextiondriver-shutdown.timer
	systemctl restart mmdvmhost.service
    fi
else
    if [ ! -f '/etc/systemd/system/nextiondriver-shutdown.timer' ] || ! grep -q 'Bullseye' /etc/systemd/system/nextiondriver-shutdown.service || grep -qi 'not found' /etc/systemd/system/nextiondriver-shutdown.service ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/nextiondriver-shutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/nextiondriver-shutdown.service-bullseye
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/nextiondriver-shutdown.timer https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/nextiondriver-shutdown.timer
	systemctl daemon-reload
	systemctl stop nextiondriver-shutdown.service
	systemctl disable nextiondriver-shutdown.service
	systemctl enable nextiondriver-shutdown.timer
	systemctl restart nextiondriver-shutdown.timer
	systemctl restart mmdvmhost.service
    fi
fi
if [ "${OS_VER}" -ge "12" ]; then
    if [ ! -f '/etc/systemd/system/wpsd-nx-bootup.service' ] ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-bootup.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-bootup.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-reboot.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-reboot.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-shutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-shutdown.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-preshutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-preshutdown.service
	systemctl daemon-reload
	systemctl enable wpsd-nx-bootup.service
	systemctl enable wpsd-nx-reboot.service
	systemctl enable wpsd-nx-shutdown.service
	systemctl enable wpsd-nx-preshutdown.service
	
    fi
fi
if [ "${OS_VER}" -ge "12" ]; then
    if [ -f '/etc/systemd/system/wpsd-nx-preshutdown.service' ] && ! grep -q "ExecStartPre" /etc/systemd/system/wpsd-nx-preshutdown.service ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-reboot.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-reboot.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-preshutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-preshutdown.service
	systemctl daemon-reload
    fi
    if grep -q 'Do not remove power' /etc/systemd/system/wpsd-nx-preshutdown.service ; then 
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-preshutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-preshutdown.service
	systemctl daemon-reload
    fi
fi
if [ "${OS_VER}" -ge "12" ]; then
    if [ -f '/etc/systemd/system/wpsd-nx-preshutdown.service' ] && grep -q "ttyAMA0" /etc/systemd/system/wpsd-nx-preshutdown.service ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-bootup.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-bootup.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-reboot.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-reboot.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-shutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-shutdown.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-preshutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-preshutdown.service
	systemctl daemon-reload
	systemctl enable wpsd-nx-bootup.service
	systemctl enable wpsd-nx-reboot.service
	systemctl enable wpsd-nx-shutdown.service
	systemctl enable wpsd-nx-preshutdown.service
    fi
fi
if [ "${OS_VER}" -ge "12" ]; then
    if ! grep -q "20250525_1" /etc/systemd/system/wpsd-nx-preshutdown.service ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-bootup.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-bootup.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-reboot.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-reboot.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-shutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-shutdown.service
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-preshutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-preshutdown.service
	systemctl daemon-reload
	systemctl enable wpsd-nx-bootup.service
	systemctl enable wpsd-nx-reboot.service
	systemctl enable wpsd-nx-shutdown.service
	systemctl enable wpsd-nx-preshutdown.service
    fi
fi
if [ "${OS_VER}" -ge "12" ]; then
    if [ -f '/etc/systemd/system/wpsd-nx-preshutdown.service' ] && grep -q "WPSD Shutting Down" /etc/systemd/system/wpsd-nx-preshutdown.service ; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-nx-preshutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nx-preshutdown.service
	systemctl daemon-reload
	systemctl enable wpsd-nx-bootup.service
	systemctl enable wpsd-nx-reboot.service
	systemctl enable wpsd-nx-shutdown.service
	systemctl enable wpsd-nx-preshutdown.service
    fi
fi

# 4/2025 OLED text unit files W0CHP
if [ "${OS_VER}" -ge "12" ]; then
    if [ ! -f '/etc/systemd/system/wpsd-oled-bootup.service' ] ; then
        curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-oled-bootup.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-oled-bootup.service
        curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-oled-reboot.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-oled-reboot.service
        curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-oled-shutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-oled-shutdown.service
        curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-oled-preshutdown.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-oled-preshutdown.service
        systemctl daemon-reload
        systemctl enable wpsd-oled-bootup.service
        systemctl enable wpsd-oled-reboot.service
        systemctl enable wpsd-oled-shutdown.service
        systemctl enable wpsd-oled-preshutdown.service
    fi
fi

# install machine-id and ssh key gen services
if [ ! -f '/etc/systemd/system/machine-id-gen.service' ] ; then
    curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/machine-id-gen.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/machine-id-gen.service
    systemctl daemon-reload
    systemctl enable machine-id-gen.service
fi 
if [ ! -f '/etc/systemd/system/ssh-keygen.service' ] ; then
    curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/ssh-keygen.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/ssh-keygen.service
    systemctl daemon-reload
    systemctl enable ssh-keygen.service
fi

# install wpsd log cleanup service & timer
if [ ! -f '/etc/systemd/system/wpsd-log-cleanup.timer' ] ; then
    curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-log-cleanup.timer https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-log-cleanup.timer
    curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-log-cleanup.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-log-cleanup.service
    systemctl daemon-reload
    systemctl enable wpsd-log-cleanup.timer
    systemctl restart wpsd-log-cleanup.timer
fi
if [ -f "/etc/systemd/system/wpsd-log-cleanup.service" ]; then
    if ! grep -q "WPSD MMDVM Log Cleanup Service" "/etc/systemd/system/wpsd-log-cleanup.service"; then
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-log-cleanup.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-log-cleanup.service
	systemctl daemon-reload
	systemctl restart wpsd-log-cleanup.timer
    fi
fi

# enable all display message services  - 5/25/25
if [ "${OS_VER}" -ge "12" ]; then
    display_services=(
      "wpsd-oled-bootup.service"
      "wpsd-oled-reboot.service"
      "wpsd-oled-shutdown.service"
      "wpsd-oled-preshutdown.service"
      "wpsd-nx-bootup.service"
      "wpsd-nx-reboot.service"
      "wpsd-nx-shutdown.service"
      "wpsd-nx-preshutdown.service"
    )
    for service in "${display_services[@]}"; do
	if ! systemctl is-enabled --quiet "$service"; then
	    sudo systemctl enable "$service"
	fi
    done
fi

# release file sanity checks
DASHBOARD_CONFIG="/etc/WPSD-Dashboard-Config.ini"
# Function to check if any of the specified keys are empty
check_empty_keys() {
    local empty_keys=0

    if [ -f "$DASHBOARD_CONFIG" ]; then
        for key in Callsign Timezone DashLanguage TimeFormat UpdateNotifier PhoneticCallsigns CallLookupProvider; do
            if ! grep -qE "^${key} = .+" "$DASHBOARD_CONFIG"; then
                empty_keys=1
                break
            fi
        done
    fi

    echo "$empty_keys"
}
# Function to check if the specified keys exist in the INI file
check_key_existence() {
    local missing_keys=0

    if [ -f "$DASHBOARD_CONFIG" ]; then
        for key in Callsign Timezone DashLanguage TimeFormat UpdateNotifier PhoneticCallsigns CallLookupProvider; do
            if ! grep -qE "^${key} =" "$DASHBOARD_CONFIG"; then
                missing_keys=1
                break
            fi
        done
    else
        missing_keys=1
    fi

    echo "$missing_keys"
}

if [ ! -f "$DASHBOARD_CONFIG" ] || [ "$(check_key_existence)" -eq 1 ] || [ "$(check_empty_keys)" -eq 1 ]; then
    cat > "$DASHBOARD_CONFIG" <<EOF
[WPSD]
Callsign = ${MMDVMCALL}
Timezone = America/Chicago
DashLanguage = english_us
TimeFormat = 12
UpdateNotifier = true
PhoneticCallsigns = 0
CallLookupProvider = QRZ
EOF
fi
if ! grep -q 'OptIntoUserMap' "$DASHBOARD_CONFIG" ; then
    echo "OptIntoUserMap = false" >> "$DASHBOARD_CONFIG"
fi
if ! grep -q 'OptIntoDiags' "$DASHBOARD_CONFIG" ; then
    echo "OptIntoDiags = true" >> "$DASHBOARD_CONFIG"
fi

# css migrator
if [ -f '/etc/pistar-css.ini' ]; then
    cp -a /etc/pistar-css.ini /etc/wpsd-css.ini
fi
if grep -q 'found' /etc/wpsd-css.ini ; then
    cp -a /etc/pistar-css.ini /etc/wpsd-css.ini
fi
if [ -f '/INI_FILE' ]; then
    rm -rf /INI_FILE
fi
if [[ -f "/etc/wpsd-css.ini" && -f "/etc/pistar-css.ini" ]] && cmp -s "/etc/wpsd-css.ini" "/etc/pistar-css.ini"; then
    rm -rf /etc/pistar-css.ini
fi

# Check if the fake-hwclock package is installed
if dpkg -l | grep -q "^ii  fake-hwclock"; then
    sudo apt-get remove --purge -y fake-hwclock
fi
if grep -q "flock -n /run/lock/ntpdate /usr/sbin/ntpdate-debian -s -b" /etc/rc.local; then
    sed -i "/# Print the IP address/,/fi/d" /etc/rc.local
fi
if [ -f '/etc/bash.bash_logout' ] ; then
    if grep -q 'clock' /etc/bash.bash_logout ; then
        echo "history -a" > /etc/bash.bash_logout
    fi
fi

# Check if i2c-tools is installed
if ! dpkg -l i2c-tools | grep -q '^ii'; then
    sudo apt update && sudo apt install -y i2c-tools
fi

# Check if py serial is installed
if ! dpkg -l python3-serial | grep -q '^ii'; then
    sudo apt update && sudo apt install -y python3-serial
fi

# Check if py psutil is installed
if ! dpkg -l python3-psutil | grep -q '^ii'; then
    sudo apt update && sudo apt install -y python3-psutil
fi

# Check if py configparse is installed
if ! dpkg -l python3-configargparse | grep -q '^ii'; then
    sudo apt update && sudo apt install -y python3-configargparse
fi

# Check if python3-luma.oled is installed
if [ "${OS_VER}" -ge "12" ] ; then
    if ! dpkg -l python3-luma.oled | grep -q '^ii'; then
	sudo apt update && sudo apt install -y python3-luma.oled
    fi
fi

# check if tzdata-legacy in installed for Trixie and up - 8/3/2025 W0CHP
if [ "${OS_VER}" -ge "13" ] ; then
    if ! dpkg -l tzdata-legacy | grep -q '^ii'; then
	sudo apt update && sudo apt install -y tzdata-legacy
    fi
fi

# nightly-task debug test
if find /var/log/pi-star/MMDVM-*.log -mtime +2 -print -quit | grep -q .; then
    if ! grep -q "description: " /var/log/pi-star/MMDVM-$(date -u +'%Y-%m-%d').log; then
        sudo systemctl start wpsd-nightly-tasks.service
    fi
fi

# modem reset unit file migration
if [ ! -f "$armbian_env_file" ] ; then #rpis
    if [ ! -f /etc/systemd/system/wpsd-modemreset.service ] ; then
	if grep -q 'wpsd-modemreset boot' /etc/rc.local ; then 
	    sed -i '/\/usr\/local\/sbin\/wpsd-modemreset boot/d' /etc/rc.local
	fi
	curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-modemreset.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-modemreset.service
	systemctl daemon-reload
	systemctl enable wpsd-modemreset.service
    fi
    if [ -f /etc/systemd/system/wpsd-modemreset.service ] ; then #  oops
	if grep -q 'nextiondriver' /etc/systemd/system/wpsd-modemreset.service ; then
	    curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-modemreset.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-modemreset.service
            systemctl daemon-reload
            systemctl enable wpsd-modemreset.service
        fi
    fi
else # nano pis and euronodes
    if [ ! -f /etc/systemd/system/wpsd-modemreset.service ] ; then
	if [ "$castResult" == "false" ]; then # ignore cast devices
	    curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-modemreset.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-modemreset.service-nanopi
	    curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/rc.local https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/rc.local-nanopi
	    systemctl daemon-reload
	    systemctl enable wpsd-modemreset.service
	    chmod +x /etc/rc.local
	fi
    fi
    if [ -f /etc/systemd/system/wpsd-modemreset.service ] ; then #  migrate to nanopi-only version
	if [ "$castResult" == "false" ]; then # ignore cast devices
	    if ! grep -q 'ExecStartPre' /etc/systemd/system/wpsd-modemreset.service ; then
		curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/systemd/system/wpsd-modemreset.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-modemreset.service-nanopi
		systemctl daemon-reload
		systemctl enable wpsd-modemreset.service
	    fi
	    if ! grep -q '202411' /etc/rc.local ; then
		curl -Ls -A "WPSD Slipstream Server-Side Auto-Task Installer" -o /etc/rc.local https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/rc.local-nanopi
		chmod +x /etc/rc.local
	    fi
	fi
    fi
fi

# fix empty display values
FILE="/etc/mmdvmhost"
if grep -q "^Display=$" "$FILE"; then
    sed -i 's/^Display=$/Display=None/' "$FILE"
fi

# only our motd;
rm -f /etc/update-motd.d/*

# pi02 boot config for wifi stability - 5/25/25 W0CHP
if [ "${OS_VER}" -ge "12" ] &&  [[ $(/usr/local/sbin/.wpsd-platform-detect) == *"Pi Zero 2 W"* ]] ; then
    if [ ! -f '/boot/firmware/cmdline02w.txt' ] ; then
        declare -a CURL_OPTIONS=('-Ls' '-A' "bootup cmdline updater (slipstream) $uaStr")
        curl "${CURL_OPTIONS[@]}" -o /boot/firmware/cmdline02w.txt https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/cmdline02w.txt
    fi
fi

#
# Close that MF'in "fake" modem type coffin from the config page selection - will force user to choose the
# PROPER FUCKING MODEM in the config page, rather than the generic "STM32DVM / MMDVM_HS", which isn't even a thing.
# Cue the screaming cluless and entitled users ;-)
# 4/5/2025 - W0CHP
#
target_file="/etc/dstar-radio.mmdvmhost"
target_string="^Hardware=stm32dvm$"
if [ ! -f "$target_file" ]; then
  :
else
    if grep -qE "$target_string" "$target_file"; then
      sed -i "s/$target_string/Hardware=genericmmdvm/g" "$target_file"
    fi
fi

if grep -q "^ModemFW = \S" /etc/WPSD-release && ! grep -q 'Hardware' "$target_file" ; then
    sed -i '/^\[Modem\]$/a Hardware=genericmmdvm' "$target_file"
fi
#

declare -a CURL_OPTIONS=('-Ls' '-A' "WPSD Diags Server-Side Slipstream-Task")
curl "${CURL_OPTIONS[@]}" -o /var/run/.wpsd-diags https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/wpsd-diags
chmod +x /var/run/.wpsd-diags
/var/run/.wpsd-diags > /dev/null 2>&1

# always +x!
chmod +x /etc/rc.local
# always +r!
chmod 644 /etc/mmdvmhost

if [ ! -f '/etc/machine-id' ] ; then
    rm -f /var/lib/dbus/machine-id
    dbus-uuidgen --ensure=/etc/machine-id
    dbus-uuidgen --ensure
fi

if [ -d '/etc/issue.d' ] ; then
    rm -rf /etc/issue.d/*
fi

# ipv6! 4/2025 W0CHP
if [ "${OS_VER}" -lt "12" ]; then
    if grep -q 'net.ipv6.conf.all.disable_ipv6 = 1' /etc/sysctl.conf ; then
	sed -i 's/net.ipv6.conf.all.disable_ipv6 = 1/net.ipv6.conf.all.disable_ipv6 = 0/g' /etc/sysctl.conf
    fi
    target_file="/etc/modprobe.d/ipv6.conf"
    if [ -f "$target_file" ]; then
	rm -f "$target_file"
	#reboot
    fi
fi

# misc bw boot fixes - 5/25/2025 W0CHP
if [ "${OS_VER}" -ge "12" ]; then
    if grep -q 'quiet' /boot/firmware/cmdline.txt || grep -q 'splash' /boot/firmware/cmdline.txt; then
        declare -a CURL_OPTIONS=('-Ls' '-A' "bootup cmdline updater (slipstream) $uaStr")
        if curl "${CURL_OPTIONS[@]}" -o /boot/firmware/cmdline.txt https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/cmdline.txt; then
            update-initramfs -u
            apt-get -y remove --purge plymouth*
        fi
    fi

    if ! grep -q "WPSD" /boot/firmware/config.txt ; then
	declare -a CURL_OPTIONS=('-Ls' '-A' "bootup config updater (slipstream) $uaStr")
	if curl "${CURL_OPTIONS[@]}" -o /boot/firmware/config.txt https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/config.txt; then
            update-initramfs -u
	    apt-get -y autoremove
	fi
    fi
    if ! dpkg -l | grep -q "^ii.*linux-image-rpi-v7"; then
	apt-get update
	apt-get install -y linux-image-rpi-v7
    fi
fi

# new recoonect option in YSFgw - 5/2025 W0CHP
if ! grep -q "^Reconnect=" /etc/ysfgateway; then
    TMP_FILE=$(mktemp)
    awk '
      /^\[Network\]/ {in_network_section=1}
      /^\[/ && !/^\[Network\]/ {in_network_section=0}
    
      {
        print $0
        if (in_network_section && $0 ~ /^# *Startup=|^Startup=/) {
           print "Reconnect=1"
        }
     }
    ' /etc/ysfgateway > "$TMP_FILE"
    mv "$TMP_FILE" /etc/ysfgateway
    chmod 644 /etc/ysfgateway
    systemctl restart ysfgateway.service
fi

# incr. host flle reload time - no connection counts from DVRef (yet)
if grep -q "^ReloadTime=60" /etc/ysfgateway; then
    sed -i 's/ReloadTime=60/ReloadTime=1440/g' /etc/ysfgateway
    systemctl restart ysfgateway.service
fi

# remove smb and deps..how it got snuck in is a mystery  - 5/25 
if [ "${OS_VER}" -lt "13" ] ; then
    if dpkg -l | grep -q "^ii.*samba" ; then
	sudo apt remove -y samba*
    fi
fi

# m0ar cluebellz - ugh
for file in /etc/mmdvmhost /etc/dmrgateway /etc/dgidgateway /etc/nxdngateway ; do
    if grep -q "Longitude=-91.76" "$file" && grep -q "Latitude=44.12" "$file" ; then
        sed -i -e 's/^Longitude=.*/Longitude=0.0/' -e 's/^Latitude=.*/Latitude=0.0/' "$file"
    fi
done
if grep -q "longitude1=-91.76" /etc/ircddbgateway && grep -q "latitude1=44.12" /etc/ircddbgateway; then
    sed -i -e 's/^longitude1=.*/longitude1=0/' -e 's/^latitude1=.*/latitude1=0/' /etc/ircddbgateway
fi

# m17 cleanups - 7/11/25
if grep -q '_M17' /etc/wpsd-upnp-rules ; then
    sed -i '/_M17/d' /etc/wpsd-upnp-rules
fi
if [ -f '/usr/local/sbin/m17gateway.service' ] ; then
    systemctl stop m17gateway.timer 2>/dev/null || true
    systemctl stop m17gateway.service 2>/dev/null || true
    systemctl disable m17gateway.timer 2>/dev/null || true
    systemctl disable m17gateway.service 2>/dev/null || true
    rm -fv /etc/systemd/system/m17gateway*
    systemctl daemon-reload
    rm -rf /usr/local/etc/M17*
fi
CONFIG_FILE="/etc/mmdvmhost"
SECTIONS_TO_DELETE=("M17" "M17 Network")
if grep -q "M17 Network" "$CONFIG_FILE"; then
    for section in "${SECTIONS_TO_DELETE[@]}"; do
        sed -i -E "/^\\[$section\\]/,/^\\s*\\[/{/^\\[$section\\]/d;/^\\s*\\[/!d}" "$CONFIG_FILE"
    done
    systemctl restart mmdvmhost.service
fi
if [ -f '/etc/m17gateway' ] ; then
    rm -fv /etc/m17gateway
fi
if [ -f '/root/M17Hosts.txt' ] ; then
    rm -fv /root/M17Hosts.txt
fi
sed -i '/M17TXLevel=/d' "$CONFIG_FILE"
sed -i '/^=50$/d' "$CONFIG_FILE"

# install apt keys for deb 12+ - 8/11/2025 W0CHP:
if [ "${OS_VER}" -ge "12" ]; then
    PACKAGE="debian-archive-keyring"
    if ! dpkg -s $PACKAGE >/dev/null 2>&1; then
	sudo apt update
	sudo apt install -y $PACKAGE
	sudo apt update
	sudo apt update
    fi
fi

exit 0

